/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip,
    input [4:0] io_button,
    output reg [6:0] seg7,
    output reg [1:0] sel,
    input [0:0] start_button,
    input [0:0] button_1,
    input [0:0] button_2,
    input [0:0] button_3,
    input [0:0] button_4,
    input [0:0] submit_button,
    output reg [0:0] led_1,
    output reg [0:0] led_2,
    output reg [0:0] led_3,
    output reg [0:0] led_4,
    output reg [0:0] led_submit,
    output reg [7:0] timer_seg,
    output reg [1:0] timer_sel,
    output reg [7:0] score_seg,
    output reg [1:0] score_sel
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_out;
  reg [1-1:0] M_edge_in;
  edge_detector_2 L_edge (
    .clk(clk),
    .in(M_edge_in),
    .out(M_edge_out)
  );
  wire [1-1:0] M_edgeTimer_out;
  reg [1-1:0] M_edgeTimer_in;
  edge_detector_2 edgeTimer (
    .clk(clk),
    .in(M_edgeTimer_in),
    .out(M_edgeTimer_out)
  );
  wire [1-1:0] M_edge_detector_b1_out;
  reg [1-1:0] M_edge_detector_b1_in;
  edge_detector_2 edge_detector_b1 (
    .clk(clk),
    .in(M_edge_detector_b1_in),
    .out(M_edge_detector_b1_out)
  );
  wire [1-1:0] M_edge_detector_b2_out;
  reg [1-1:0] M_edge_detector_b2_in;
  edge_detector_2 edge_detector_b2 (
    .clk(clk),
    .in(M_edge_detector_b2_in),
    .out(M_edge_detector_b2_out)
  );
  wire [1-1:0] M_edge_detector_b3_out;
  reg [1-1:0] M_edge_detector_b3_in;
  edge_detector_2 edge_detector_b3 (
    .clk(clk),
    .in(M_edge_detector_b3_in),
    .out(M_edge_detector_b3_out)
  );
  wire [1-1:0] M_edge_detector_b4_out;
  reg [1-1:0] M_edge_detector_b4_in;
  edge_detector_2 edge_detector_b4 (
    .clk(clk),
    .in(M_edge_detector_b4_in),
    .out(M_edge_detector_b4_out)
  );
  wire [1-1:0] M_edge_detector_submit_out;
  reg [1-1:0] M_edge_detector_submit_in;
  edge_detector_2 edge_detector_submit (
    .clk(clk),
    .in(M_edge_detector_submit_in),
    .out(M_edge_detector_submit_out)
  );
  wire [1-1:0] M_edge_detector_start_out;
  reg [1-1:0] M_edge_detector_start_in;
  edge_detector_2 edge_detector_start (
    .clk(clk),
    .in(M_edge_detector_start_in),
    .out(M_edge_detector_start_out)
  );
  wire [1-1:0] M_btn_cond_b1_out;
  reg [1-1:0] M_btn_cond_b1_in;
  button_conditioner_3 btn_cond_b1 (
    .clk(clk),
    .in(M_btn_cond_b1_in),
    .out(M_btn_cond_b1_out)
  );
  wire [1-1:0] M_btn_cond_b2_out;
  reg [1-1:0] M_btn_cond_b2_in;
  button_conditioner_3 btn_cond_b2 (
    .clk(clk),
    .in(M_btn_cond_b2_in),
    .out(M_btn_cond_b2_out)
  );
  wire [1-1:0] M_btn_cond_b3_out;
  reg [1-1:0] M_btn_cond_b3_in;
  button_conditioner_3 btn_cond_b3 (
    .clk(clk),
    .in(M_btn_cond_b3_in),
    .out(M_btn_cond_b3_out)
  );
  wire [1-1:0] M_btn_cond_b4_out;
  reg [1-1:0] M_btn_cond_b4_in;
  button_conditioner_3 btn_cond_b4 (
    .clk(clk),
    .in(M_btn_cond_b4_in),
    .out(M_btn_cond_b4_out)
  );
  wire [1-1:0] M_btn_cond_submit_out;
  reg [1-1:0] M_btn_cond_submit_in;
  button_conditioner_3 btn_cond_submit (
    .clk(clk),
    .in(M_btn_cond_submit_in),
    .out(M_btn_cond_submit_out)
  );
  wire [1-1:0] M_btn_cond_start_out;
  reg [1-1:0] M_btn_cond_start_in;
  button_conditioner_3 btn_cond_start (
    .clk(clk),
    .in(M_btn_cond_start_in),
    .out(M_btn_cond_start_out)
  );
  wire [4-1:0] M_fsmMod_score;
  wire [5-1:0] M_fsmMod_stateCheck;
  wire [1-1:0] M_fsmMod_led1;
  wire [1-1:0] M_fsmMod_led2;
  wire [1-1:0] M_fsmMod_led3;
  wire [1-1:0] M_fsmMod_led4;
  wire [1-1:0] M_fsmMod_ledSubmit;
  wire [1-1:0] M_fsmMod_timerReset;
  wire [4-1:0] M_fsmMod_timerOut1;
  wire [4-1:0] M_fsmMod_timerOut2;
  wire [1-1:0] M_fsmMod_timerStart;
  reg [1-1:0] M_fsmMod_start;
  reg [1-1:0] M_fsmMod_button1;
  reg [1-1:0] M_fsmMod_button2;
  reg [1-1:0] M_fsmMod_button3;
  reg [1-1:0] M_fsmMod_button4;
  reg [1-1:0] M_fsmMod_submit;
  reg [1-1:0] M_fsmMod_display;
  reg [1-1:0] M_fsmMod_edgeTimer;
  fsm_module_4 fsmMod (
    .clk(clk),
    .rst(rst),
    .start(M_fsmMod_start),
    .button1(M_fsmMod_button1),
    .button2(M_fsmMod_button2),
    .button3(M_fsmMod_button3),
    .button4(M_fsmMod_button4),
    .submit(M_fsmMod_submit),
    .display(M_fsmMod_display),
    .edgeTimer(M_fsmMod_edgeTimer),
    .score(M_fsmMod_score),
    .stateCheck(M_fsmMod_stateCheck),
    .led1(M_fsmMod_led1),
    .led2(M_fsmMod_led2),
    .led3(M_fsmMod_led3),
    .led4(M_fsmMod_led4),
    .ledSubmit(M_fsmMod_ledSubmit),
    .timerReset(M_fsmMod_timerReset),
    .timerOut1(M_fsmMod_timerOut1),
    .timerOut2(M_fsmMod_timerOut2),
    .timerStart(M_fsmMod_timerStart)
  );
  wire [1-1:0] M_slowClock_value;
  counter_5 slowClock (
    .clk(clk),
    .rst(rst),
    .value(M_slowClock_value)
  );
  wire [1-1:0] M_timerClock_value;
  counter_6 timerClock (
    .clk(clk),
    .rst(rst),
    .value(M_timerClock_value)
  );
  wire [7-1:0] M_multiTimer_seg;
  wire [4-1:0] M_multiTimer_sel;
  reg [16-1:0] M_multiTimer_values;
  multi_seven_seg_7 multiTimer (
    .clk(clk),
    .rst(rst),
    .values(M_multiTimer_values),
    .seg(M_multiTimer_seg),
    .sel(M_multiTimer_sel)
  );
  wire [7-1:0] M_multiScore_seg;
  wire [4-1:0] M_multiScore_sel;
  reg [16-1:0] M_multiScore_values;
  multi_seven_seg_7 multiScore (
    .clk(clk),
    .rst(rst),
    .values(M_multiScore_values),
    .seg(M_multiScore_seg),
    .sel(M_multiScore_sel)
  );
  wire [4-1:0] M_scoreDisplay_out1;
  wire [4-1:0] M_scoreDisplay_out2;
  reg [4-1:0] M_scoreDisplay_score;
  score_display_8 scoreDisplay (
    .clk(clk),
    .rst(rst),
    .score(M_scoreDisplay_score),
    .out1(M_scoreDisplay_out1),
    .out2(M_scoreDisplay_out2)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    seg7 = 7'h00;
    sel = 2'h0;
    M_btn_cond_b1_in = button_1;
    M_btn_cond_b2_in = button_2;
    M_btn_cond_b3_in = button_3;
    M_btn_cond_b4_in = button_4;
    M_btn_cond_submit_in = submit_button;
    M_btn_cond_start_in = start_button;
    M_edge_detector_b1_in = M_btn_cond_b1_out;
    M_edge_detector_b2_in = M_btn_cond_b2_out;
    M_edge_detector_b3_in = M_btn_cond_b3_out;
    M_edge_detector_b4_in = M_btn_cond_b4_out;
    M_edge_detector_submit_in = M_btn_cond_submit_out;
    M_edge_detector_start_in = M_btn_cond_start_out;
    M_edge_in = M_slowClock_value;
    M_edgeTimer_in = M_timerClock_value;
    M_fsmMod_button1 = M_edge_detector_b1_out;
    M_fsmMod_button2 = M_edge_detector_b2_out;
    M_fsmMod_button3 = M_edge_detector_b3_out;
    M_fsmMod_button4 = M_edge_detector_b4_out;
    M_fsmMod_submit = M_edge_detector_submit_out;
    M_fsmMod_start = M_edge_detector_start_out;
    M_fsmMod_display = M_edge_out;
    M_fsmMod_edgeTimer = M_edgeTimer_out;
    M_scoreDisplay_score = M_fsmMod_score;
    led_1 = M_fsmMod_led1;
    led_2 = M_fsmMod_led2;
    led_3 = M_fsmMod_led3;
    led_4 = M_fsmMod_led4;
    led_submit = M_fsmMod_ledSubmit;
    M_multiTimer_values = {4'h0, 4'h0, M_fsmMod_timerOut1, M_fsmMod_timerOut2};
    M_multiScore_values = {4'h0, 4'h0, M_scoreDisplay_out1, M_scoreDisplay_out2};
    timer_seg = M_multiTimer_seg;
    timer_sel = ~M_multiTimer_sel;
    score_seg = M_multiScore_seg;
    score_sel = ~M_multiScore_sel;
  end
endmodule
