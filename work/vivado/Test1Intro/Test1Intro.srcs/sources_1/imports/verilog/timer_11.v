/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module timer_11 (
    input clk,
    input rst,
    input start,
    output reg [3:0] out1,
    output reg [3:0] out2,
    output reg isOver,
    output reg test
  );
  
  
  
  
  localparam INIT_timerState = 2'd0;
  localparam IDLE_timerState = 2'd1;
  localparam COUNT_timerState = 2'd2;
  localparam END_timerState = 2'd3;
  
  reg [1:0] M_timerState_d, M_timerState_q = INIT_timerState;
  
  reg [3:0] M_digit1_d, M_digit1_q = 1'h0;
  
  reg [3:0] M_digit2_d, M_digit2_q = 1'h0;
  
  always @* begin
    M_timerState_d = M_timerState_q;
    M_digit1_d = M_digit1_q;
    M_digit2_d = M_digit2_q;
    
    out1 = 4'h0;
    out2 = 4'h0;
    isOver = 1'h0;
    test = 1'h0;
    if (rst) begin
      M_timerState_d = INIT_timerState;
    end
    
    case (M_timerState_q)
      INIT_timerState: begin
        out1 = 4'h0;
        out2 = 4'h0;
        test = 1'h1;
        if (start == 1'h1) begin
          M_digit1_d = 2'h3;
          M_digit2_d = 1'h0;
          out1 = M_digit1_q;
          out2 = M_digit2_q;
          M_timerState_d = COUNT_timerState;
        end
      end
      IDLE_timerState: begin
        if (M_digit1_q <= 4'h0 && M_digit2_q <= 4'h0) begin
          M_timerState_d = END_timerState;
        end else begin
          out1 = M_digit1_q;
          out2 = M_digit2_q;
          M_timerState_d = COUNT_timerState;
        end
      end
      COUNT_timerState: begin
        if (M_digit2_q == 1'h0) begin
          M_digit1_d = M_digit1_q - 1'h1;
          M_digit2_d = 4'h9;
        end else begin
          M_digit2_d = M_digit2_q - 1'h1;
        end
        out1 = M_digit1_q;
        out2 = M_digit2_q;
        M_timerState_d = IDLE_timerState;
      end
      END_timerState: begin
        isOver = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timerState_q <= 1'h0;
    end else begin
      M_timerState_q <= M_timerState_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_digit1_q <= 1'h0;
    end else begin
      M_digit1_q <= M_digit1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_digit2_q <= 1'h0;
    end else begin
      M_digit2_q <= M_digit2_d;
    end
  end
  
endmodule
